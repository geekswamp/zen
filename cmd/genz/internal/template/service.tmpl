// THIS FILE IS AUTO GENERATED by genz.

package service

import (
	"time"

	"{{ .Module }}/internal/base"
	"{{ .Module }}/internal/model"
	"{{ .Module }}/internal/repository"
	"github.com/google/uuid"
)

type {{ ToPascalCase .StructName }}Service interface {
	Create() error
	Update(id uuid.UUID, {{ ToCamelCase .StructName }}Map base.UpdateMap) error
	Delete(id uuid.UUID) error
	SoftDelete(id uuid.UUID) error
}

type {{ ToPascalCase .StructName }}ServiceRepo struct {
	repo repository.{{ ToPascalCase .StructName }}Repository
}

func New{{ ToPascalCase .StructName }}Service(repo repository.{{ ToPascalCase .StructName }}Repository) {{ ToPascalCase .StructName }}Service {
	return {{ ToPascalCase .StructName }}ServiceRepo{repo: repo}
}

func (s {{ ToPascalCase .StructName }}ServiceRepo) Create() error {
	{{ ToCamelCase .StructName }} := model.{{ ToPascalCase .StructName }}{}

	if err := s.repo.Create({{ ToCamelCase .StructName }}); err != nil {
		return err
	}

	return nil
}

func (s {{ ToPascalCase .StructName }}ServiceRepo) Update(id uuid.UUID, {{ ToCamelCase .StructName }}Map base.UpdateMap) error {
	return s.repo.Update(id, {{ ToCamelCase .StructName }}Map)
}

func (s {{ ToPascalCase .StructName }}ServiceRepo) Delete(id uuid.UUID) error {
	return s.repo.Delete(id)
}

func (s {{ ToPascalCase .StructName }}ServiceRepo) SoftDelete(id uuid.UUID) error {
	return s.Update(id, base.UpdateMap{"DeletedTime": time.Now().Local().UnixMilli()})
}