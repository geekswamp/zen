// THIS FILE IS AUTO GENERATED by genz.

package repository

import (
	"{{ .Module }}/internal/base"
	"{{ .Module }}/internal/model"
	"github.com/google/uuid"
)

type {{ ToPascalCase .StructName }}Repository interface {
  Create({{ ToCamelCase .StructName }} model.{{ ToPascalCase .StructName }}) error
  FindByID(id uuid.UUID) (*model.{{ ToPascalCase .StructName }}, error)
  Update(id uuid.UUID, {{ ToCamelCase .StructName }}Map map[string]any) error
  Delete(id uuid.UUID) error
}

type {{ ToPascalCase .StructName }}Resource struct{ repo base.Repository }

func New(repo base.Repository) {{ ToPascalCase .StructName }}Repository {
  return {{ ToPascalCase .StructName }}Resource{repo: repo}
}

func (r {{ ToPascalCase .StructName }}Resource) Create({{ ToCamelCase .StructName }} model.{{ ToPascalCase .StructName }}) error {
  return r.repo.DB().Create(&{{ ToCamelCase .StructName }}).Error
}

func (r {{ ToPascalCase .StructName }}Resource) FindByID(id uuid.UUID) (*model.{{ ToPascalCase .StructName }}, error) {
  {{ ToCamelCase .StructName }} := model.{{ ToPascalCase .StructName }}{}
  if err := r.repo.DB().First({{ ToCamelCase .StructName }}, id).Error; err != nil {
    return nil, err
  }

  return &{{ ToCamelCase .StructName }}, nil
}

func (r {{ ToPascalCase .StructName }}Resource) Update(id uuid.UUID, {{ ToCamelCase .StructName }}Map map[string]any) error {
  {{ ToCamelCase .StructName }}, err := r.FindByID(id)
  if err != nil {
    return err
  }

  return r.repo.DB().Model(&{{ ToCamelCase .StructName }}).Updates({{ ToCamelCase .StructName }}Map).Error
}

func (r {{ ToPascalCase .StructName }}Resource) Delete(id uuid.UUID) error {
  return r.repo.DB().Delete(model.{{ ToPascalCase .StructName }}{}, id).Error
}